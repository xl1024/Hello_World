public class TestEdible {
    public static void main(String [] args){
        Object[] objects = {new Tiger(),new Chicken(),new Apple()};
        for (int i = 0; i <objects.length ; i++) {
            if(objects[i] instanceof Edible){
                System.out.println(((Edible)objects[i]).howToEat());
            }
            if (objects[i] instanceof Animal){
                System.out.println(((Animal)objects[i]).sound());
            }
        }
    }
}


interface Edible{  // 一个接口
    abstract public String howToEat();   // 定义一个抽象方法    表示这个东西怎么被吃
}

abstract class Animal{   // 一个抽象类
    public abstract String sound();        // 定义一个抽象方法   表示动物发出什么声音
}

class Chicken extends Animal implements Edible{

    @Override
    public String sound() {
        return "Chicken:cock-a-dooble-doo";
    }

    @Override
    public String howToEat(){
        return "Chicken : Fry it";
    }
}

class Tiger extends Animal{
    @Override
    public String sound() {
        return "Tiger:RROOAARR";
    }
}

abstract class Fruit implements Edible{

}

class Apple extends Fruit{
    @Override
    public String howToEat() {
        return "Apple:Make apple cider";
    }
}

class Orange extends Fruit{
    @Override
    public String howToEat() {
        return "Orange:Make orange juice";
    }
}













