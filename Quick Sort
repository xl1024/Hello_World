#include <iostream>
#include <algorithm>
#include <ctime>
#include <cstdlib>

using namespace std;

const int size_array = 10;
typedef int type_array;

template<typename T>
int QKPass(T * A, int low, int high);

template<typename T>
void QKSort(T * A, int low, int high);

int main()
{
    srand(time(NULL));
    type_array a[size_array];
    for(int i = 0; i < size_array; i++)
    {
        a[i] = rand() % 100 + 40;
    }
    for(int i = 0; i < size_array; i++)
    {
        cout << a[i];
        cout << "  ";
    }
    cout << endl;
    QKSort(a,0,size_array-1);
    for(int i = 0; i < size_array; i++)
    {
        cout << a[i];
        cout << "  ";
    }
    return 0;
}

template<typename T>
void QKSort(T * A, int low, int high)
{
    if(low < high)
    {
        int pos = QKPass(A, low, high);
        QKSort(A, low, pos - 1);
        QKSort(A, pos + 1, high);
    }
}

template<typename T>
int QKPass(T * A, int low, int high)
{
    T x = A[low];                 // high 自右向左移动，low 自左向右移动
    while(low < high)
    {
        while(low < high && A[high] > x)
            high--;
        if(low < high)
        {
            A[low] = A[high];
            low++;
        }
        while(low < high && A[low] < x)
            low++;
        if(low < high)
        {
            A[high] = A[low];
            high--;
        }
    }
    A[low] = x;
    return low;
}
